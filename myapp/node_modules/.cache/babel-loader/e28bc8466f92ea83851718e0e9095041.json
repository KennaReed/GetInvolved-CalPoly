{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar react = require('react');\n\nvar fileSelector = require('file-selector');\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction useFilePicker(_ref) {\n  var _ref$accept = _ref.accept,\n      accept = _ref$accept === void 0 ? '*' : _ref$accept,\n      _ref$multiple = _ref.multiple,\n      multiple = _ref$multiple === void 0 ? true : _ref$multiple,\n      minFileSize = _ref.minFileSize,\n      maxFileSize = _ref.maxFileSize;\n\n  var _useState = react.useState([]),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var _useState2 = react.useState([]),\n      filesContent = _useState2[0],\n      setFilesContent = _useState2[1];\n\n  var _useState3 = react.useState([]),\n      fileErrors = _useState3[0],\n      setFileErrors = _useState3[1];\n\n  var _useState4 = react.useState(false),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var openFileSelector = function openFileSelector() {\n    var fileExtensions = accept instanceof Array ? accept.join(',') : accept;\n    openFileDialog(fileExtensions, multiple, function (evt) {\n      fileSelector.fromEvent(evt).then(function (files) {\n        setFiles(files);\n      });\n    });\n  };\n\n  react.useEffect(function () {\n    if (files.length === 0) {\n      setFilesContent([]);\n      return;\n    }\n\n    setLoading(true);\n    var filePromises = files.map(function (file) {\n      return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.readAsText(file);\n\n        reader.onload = function () {\n          if (minFileSize) {\n            var minBytes = minFileSize * BYTES_PER_MEGABYTE;\n\n            if (file.size < minBytes) {\n              addError({\n                fileSizeTooSmall: true\n              });\n            }\n          }\n\n          if (maxFileSize) {\n            addError({\n              fileSizeToolarge: true\n            });\n          }\n\n          resolve({\n            content: reader.result,\n            name: file.name,\n            lastModified: file.lastModified\n          });\n        };\n\n        var addError = function addError(_ref2) {\n          var _ref2$name = _ref2.name,\n              name = _ref2$name === void 0 ? file.name : _ref2$name,\n              others = _objectWithoutPropertiesLoose(_ref2, [\"name\"]);\n\n          reject(_extends({\n            name: name,\n            fileSizeToolarge: false,\n            fileSizeTooSmall: false\n          }, others));\n        };\n      });\n    });\n    Promise.all(filePromises).then(function (fileContent) {\n      setFilesContent(fileContent);\n      setFileErrors([]);\n    })[\"catch\"](function (err) {\n      setFileErrors(function (f) {\n        return [err].concat(f);\n      });\n    })[\"finally\"](function () {\n      return setLoading(false);\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [files]);\n  return [filesContent, fileErrors, openFileSelector, loading];\n}\n\nfunction openFileDialog(accept, multiple, callback) {\n  // this function must be called from  a user\n  // activation event (ie an onclick event)\n  // Create an input element\n  var inputElement = document.createElement('input'); // Set its type to file\n\n  inputElement.type = 'file'; // Set accept to the file types you want the user to select.\n  // Include both the file extension and the mime type\n\n  inputElement.accept = accept; // Accept multiple files\n\n  inputElement.multiple = multiple; // set onchange event to call callback when user has selected file\n\n  inputElement.addEventListener('change', callback); // dispatch a click event to open the file dialog\n\n  inputElement.dispatchEvent(new MouseEvent('click'));\n} //Const values\n\n\nvar BYTES_PER_MEGABYTE = 1000000;\nexports.useFilePicker = useFilePicker;","map":{"version":3,"sources":["../src/useFilePicker.tsx"],"names":["accept","multiple","minFileSize","maxFileSize","files","setFiles","useState","filesContent","setFilesContent","fileErrors","setFileErrors","loading","setLoading","openFileSelector","fileExtensions","openFileDialog","fromEvent","useEffect","filePromises","reader","minBytes","file","addError","fileSizeTooSmall","fileSizeToolarge","resolve","content","name","lastModified","others","reject","Promise","inputElement","document","BYTES_PER_MEGABYTE"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,SAAA,aAAA,CAAA,IAAA,EAAA;yBAAyBA,M;MAAAA,MAAAA,GAAAA,WAAAA,KAAAA,KAAAA,CAAAA,GAAS,GAATA,GAAS,W;2BAAKC,Q;MAAAA,QAAAA,GAAAA,aAAAA,KAAAA,KAAAA,CAAAA,GAAW,IAAXA,GAAW,a;MAAMC,WAAAA,GAAAA,IAAAA,CAAAA,W;MAAaC,WAAAA,GAAAA,IAAAA,CAAAA,W;;kBACzCG,KAAAA,CAAAA,QAAAA,CAAQ,EAARA,C;MAAnBF,KAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAAOC,QAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;mBAC0BC,KAAAA,CAAAA,QAAAA,CAAQ,EAARA,C;MAAjCC,YAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;MAAcC,eAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;mBACeF,KAAAA,CAAAA,QAAAA,CAAQ,EAARA,C;MAA7BG,UAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;MAAYC,aAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;mBACWJ,KAAAA,CAAAA,QAAAA,CAAQ,KAARA,C;MAAvBK,OAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;MAASC,UAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;AAEhB,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAA;AACvB,QAAMC,cAAc,GAAGd,MAAM,YAANA,KAAAA,GAA0BA,MAAM,CAANA,IAAAA,CAA1BA,GAA0BA,CAA1BA,GAAvB,MAAA;AACAe,IAAAA,cAAc,CAAA,cAAA,EAAA,QAAA,EAA2B,UAAA,GAAA,EAAG;AAC1CC,MAAAA,YAAAA,CAAAA,SAAAA,CAAAA,GAAAA,EAAAA,IAAAA,CAAoB,UAAA,KAAA,EAAK;AACvBX,QAAAA,QAAQ,CAARA,KAAQ,CAARA;AADFW,OAAAA;AADFD,KAAc,CAAdA;AAFF,GAAA;;AASAE,EAAAA,KAAAA,CAAAA,SAAAA,CAAU,YAAA;AACR,QAAIb,KAAK,CAALA,MAAAA,KAAJ,CAAA,EAAwB;AACtBI,MAAAA,eAAe,CAAfA,EAAe,CAAfA;AACA;AACD;;AACDI,IAAAA,UAAU,CAAVA,IAAU,CAAVA;AACA,QAAMM,YAAY,GAAG,KAAK,CAAL,GAAA,CACnB,UAAA,IAAA,EAAA;AAAA,aACE,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAA;AACV,YAAMC,MAAM,GAAG,IAAf,UAAe,EAAf;AACAA,QAAAA,MAAM,CAANA,UAAAA,CAAAA,IAAAA;;AAEAA,QAAAA,MAAM,CAANA,MAAAA,GAAgB,YAAA;AACd,cAAA,WAAA,EAAiB;AACf,gBAAMC,QAAQ,GAAGlB,WAAW,GAA5B,kBAAA;;AACA,gBAAImB,IAAI,CAAJA,IAAAA,GAAJ,QAAA,EAA0B;AACxBC,cAAAA,QAAQ,CAAC;AAAEC,gBAAAA,gBAAgB,EAAE;AAApB,eAAD,CAARD;AACD;AACF;;AACD,cAAA,WAAA,EAAiB;AAIfA,YAAAA,QAAQ,CAAC;AAAEE,cAAAA,gBAAgB,EAAE;AAApB,aAAD,CAARF;AACD;;AAEDG,UAAAA,OAAO,CAAC;AACNC,YAAAA,OAAO,EAAEP,MAAM,CADT,MAAA;AAENQ,YAAAA,IAAI,EAAEN,IAAI,CAFJ,IAAA;AAGNO,YAAAA,YAAY,EAAEP,IAAI,CAACO;AAHb,WAAD,CAAPH;AAdFN,SAAAA;;AAoBA,YAAMG,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAA;iCAAGK,I;cAAAA,IAAAA,GAAAA,UAAAA,KAAAA,KAAAA,CAAAA,GAAON,IAAI,CAACM,IAAZA,GAAYA,U;cAASE,MAAAA,GAAAA,6BAAAA,CAAAA,KAAAA,EAAAA,CAAAA,MAAAA,CAAAA,C;;AACvCC,UAAAA,MAAM,CAAA,QAAA,CAAA;AAAGH,YAAAA,IAAI,EAAP,IAAA;AAASH,YAAAA,gBAAgB,EAAzB,KAAA;AAAkCD,YAAAA,gBAAgB,EAAE;AAApD,WAAA,EAANO,MAAM,CAAA,CAANA;AADF,SAAA;AAzBJ,OACE,CADF;AADF,KAAqB,CAArB;AA+BAC,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,YAAAA,EAAAA,IAAAA,CACQ,UAAA,WAAA,EAAA;AACJvB,MAAAA,eAAe,CAAfA,WAAe,CAAfA;AACAE,MAAAA,aAAa,CAAbA,EAAa,CAAbA;AAHJqB,KAAAA,EAAAA,OAAAA,EAKS,UAAA,GAAA,EAAG;AACRrB,MAAAA,aAAa,CAAC,UAAA,CAAA,EAAC;AAAA,eAAA,CAAA,GAAA,EAAA,MAAA,CAAA,CAAA,CAAA;AAAfA,OAAa,CAAbA;AANJqB,KAAAA,EAAAA,SAAAA,EAQW,YAAA;AAAA,aAAMnB,UAAU,CAAhB,KAAgB,CAAhB;AARXmB,KAAAA,EArCQ,CAqCRA;AArCO,GAATd,EA+CG,CA/CHA,KA+CG,CA/CHA;AAiDA,SAAO,CAAA,YAAA,EAAA,UAAA,EAAA,gBAAA,EAAP,OAAO,CAAP;AACD;;AAID,SAAA,cAAA,CAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA;AACE;AACA;AAEA;AACA,MAAIe,YAAY,GAAGC,QAAQ,CAARA,aAAAA,CAAnB,OAAmBA,CAAnB,CALF,CAKE;;AAEAD,EAAAA,YAAY,CAAZA,IAAAA,GAAAA,MAAAA,CAPF,CAOEA;AAEA;;AACAA,EAAAA,YAAY,CAAZA,MAAAA,GAAAA,MAAAA,CAVF,CAUEA;;AAEAA,EAAAA,YAAY,CAAZA,QAAAA,GAAAA,QAAAA,CAZF,CAYEA;;AAEAA,EAAAA,YAAY,CAAZA,gBAAAA,CAAAA,QAAAA,EAAAA,QAAAA,EAdF,CAcEA;;AAEAA,EAAAA,YAAY,CAAZA,aAAAA,CAA2B,IAAA,UAAA,CAA3BA,OAA2B,CAA3BA;AACD,C,CAAA;;;AAGD,IAAME,kBAAkB,GAAxB,OAAA","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { fromEvent, FileWithPath } from 'file-selector';\r\nimport { UseFilePickerConfig, FileContent, FilePickerReturnTypes, FileError } from './interfaces';\r\n\r\nfunction useFilePicker({ accept = '*', multiple = true, minFileSize, maxFileSize }: UseFilePickerConfig): FilePickerReturnTypes {\r\n  const [files, setFiles] = useState<FileWithPath[]>([]);\r\n  const [filesContent, setFilesContent] = useState<FileContent[]>([]);\r\n  const [fileErrors, setFileErrors] = useState<FileError[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const openFileSelector = () => {\r\n    const fileExtensions = accept instanceof Array ? accept.join(',') : accept;\r\n    openFileDialog(fileExtensions, multiple, evt => {\r\n      fromEvent(evt).then(files => {\r\n        setFiles(files as FileWithPath[]);\r\n      });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (files.length === 0) {\r\n      setFilesContent([]);\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    const filePromises = files.map(\r\n      (file: FileWithPath) =>\r\n        new Promise((resolve: (fileContent: FileContent) => void, reject: (reason: FileError) => void) => {\r\n          const reader = new FileReader();\r\n          reader.readAsText(file);\r\n\r\n          reader.onload = () => {\r\n            if (minFileSize) {\r\n              const minBytes = minFileSize * BYTES_PER_MEGABYTE;\r\n              if (file.size < minBytes) {\r\n                addError({ fileSizeTooSmall: true });\r\n              }\r\n            }\r\n            if (maxFileSize) {\r\n              const maxBytes = maxFileSize * BYTES_PER_MEGABYTE;\r\n              if (file.size > maxBytes) {\r\n              }\r\n              addError({ fileSizeToolarge: true });\r\n            }\r\n\r\n            resolve({\r\n              content: reader.result as string,\r\n              name: file.name,\r\n              lastModified: file.lastModified,\r\n            } as FileContent);\r\n          };\r\n          const addError = ({ name = file.name, ...others }: FileError) => {\r\n            reject({ name, fileSizeToolarge: false, fileSizeTooSmall: false, ...others });\r\n          };\r\n        })\r\n    );\r\n    Promise.all(filePromises)\r\n      .then((fileContent: FileContent[]) => {\r\n        setFilesContent(fileContent);\r\n        setFileErrors([]);\r\n      })\r\n      .catch(err => {\r\n        setFileErrors(f => [err, ...f]);\r\n      })\r\n      .finally(() => setLoading(false));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [files]);\r\n\r\n  return [filesContent, fileErrors, openFileSelector, loading];\r\n}\r\n\r\nexport default useFilePicker;\r\n\r\nfunction openFileDialog(accept: string, multiple: boolean, callback: (arg: any) => void) {\r\n  // this function must be called from  a user\r\n  // activation event (ie an onclick event)\r\n\r\n  // Create an input element\r\n  var inputElement = document.createElement('input');\r\n  // Set its type to file\r\n  inputElement.type = 'file';\r\n  // Set accept to the file types you want the user to select.\r\n  // Include both the file extension and the mime type\r\n  inputElement.accept = accept;\r\n  // Accept multiple files\r\n  inputElement.multiple = multiple;\r\n  // set onchange event to call callback when user has selected file\r\n  inputElement.addEventListener('change', callback);\r\n  // dispatch a click event to open the file dialog\r\n  inputElement.dispatchEvent(new MouseEvent('click'));\r\n}\r\n\r\n//Const values\r\nconst BYTES_PER_MEGABYTE = 1000000;\r\n"]},"metadata":{},"sourceType":"script"}