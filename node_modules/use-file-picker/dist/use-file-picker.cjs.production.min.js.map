{"version":3,"file":"use-file-picker.cjs.production.min.js","sources":["../src/useFilePicker.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { fromEvent, FileWithPath } from 'file-selector';\r\nimport { UseFilePickerConfig, FileContent, FilePickerReturnTypes, FileError, ReaderMethod } from './interfaces';\r\n\r\nfunction useFilePicker({\r\n  accept = '*',\r\n  multiple = true,\r\n  readAs = 'Text',\r\n  minFileSize,\r\n  maxFileSize,\r\n  limitFilesConfig,\r\n}: UseFilePickerConfig): FilePickerReturnTypes {\r\n  const [files, setFiles] = useState<FileWithPath[]>([]);\r\n  const [filesContent, setFilesContent] = useState<FileContent[]>([]);\r\n  const [fileErrors, setFileErrors] = useState<FileError[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const openFileSelector = () => {\r\n    const fileExtensions = accept instanceof Array ? accept.join(',') : accept;\r\n    openFileDialog(fileExtensions, multiple, evt => {\r\n      fromEvent(evt).then(files => {\r\n        setFiles(files as FileWithPath[]);\r\n      });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (files.length === 0) {\r\n      setFilesContent([]);\r\n      return;\r\n    }\r\n    if (limitFilesConfig) {\r\n      if (limitFilesConfig.max && files.length > limitFilesConfig.max) {\r\n        setFileErrors(f => [{ maxLimitExceeded: true }, ...f]);\r\n        return;\r\n      }\r\n\r\n      if (limitFilesConfig.min && files.length < limitFilesConfig.min) {\r\n        setFileErrors(f => [{ minLimitNotReached: true }, ...f]);\r\n        return;\r\n      }\r\n    }\r\n    setLoading(true);\r\n    const filePromises = files.map(\r\n      (file: FileWithPath) =>\r\n        new Promise((resolve: (fileContent: FileContent) => void, reject: (reason: FileError) => void) => {\r\n          const reader = new FileReader();\r\n\r\n          //availible reader methods: readAsText, readAsBinaryString, readAsArrayBuffer, readAsDataURL\r\n          const readStrategy = reader[`readAs${readAs}` as ReaderMethod] as typeof reader.readAsText;\r\n          readStrategy.call(reader, file);\r\n\r\n          reader.onload = () => {\r\n            if (minFileSize) {\r\n              const minBytes = minFileSize * BYTES_PER_MEGABYTE;\r\n              if (file.size < minBytes) {\r\n                addError({ fileSizeTooSmall: true });\r\n              }\r\n            }\r\n            if (maxFileSize) {\r\n              const maxBytes = maxFileSize * BYTES_PER_MEGABYTE;\r\n              if (file.size > maxBytes) {\r\n                addError({ fileSizeToolarge: true });\r\n              }\r\n            }\r\n\r\n            resolve({\r\n              content: reader.result as string,\r\n              name: file.name,\r\n              lastModified: file.lastModified,\r\n            } as FileContent);\r\n          };\r\n\r\n          reader.onerror = () => {\r\n            addError({ readerError: reader.error });\r\n          };\r\n\r\n          const addError = ({ name = file.name, ...others }: FileError) => {\r\n            reject({ name, fileSizeToolarge: false, fileSizeTooSmall: false, ...others });\r\n          };\r\n        })\r\n    );\r\n    Promise.all(filePromises)\r\n      .then((fileContent: FileContent[]) => {\r\n        setFilesContent(fileContent);\r\n        setFileErrors([]);\r\n      })\r\n      .catch(err => {\r\n        setFileErrors(f => [err, ...f]);\r\n      })\r\n      .finally(() => setLoading(false));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [files]);\r\n\r\n  return [filesContent, fileErrors, openFileSelector, loading];\r\n}\r\n\r\nexport default useFilePicker;\r\n\r\nfunction openFileDialog(accept: string, multiple: boolean, callback: (arg: any) => void) {\r\n  // this function must be called from  a user\r\n  // activation event (ie an onclick event)\r\n\r\n  // Create an input element\r\n  var inputElement = document.createElement('input');\r\n  // Set its type to file\r\n  inputElement.type = 'file';\r\n  // Set accept to the file types you want the user to select.\r\n  // Include both the file extension and the mime type\r\n  inputElement.accept = accept;\r\n  // Accept multiple files\r\n  inputElement.multiple = multiple;\r\n  // set onchange event to call callback when user has selected file\r\n  inputElement.addEventListener('change', callback);\r\n  // dispatch a click event to open the file dialog\r\n  inputElement.dispatchEvent(new MouseEvent('click'));\r\n}\r\n\r\n//Const values\r\nconst BYTES_PER_MEGABYTE = 1000000;\r\n"],"names":["accept","multiple","readAs","minFileSize","maxFileSize","limitFilesConfig","useState","files","setFiles","filesContent","setFilesContent","fileErrors","setFileErrors","loading","setLoading","useEffect","length","max","f","maxLimitExceeded","min","minLimitNotReached","filePromises","map","file","Promise","resolve","reject","reader","FileReader","call","onload","size","addError","fileSizeTooSmall","fileSizeToolarge","content","result","name","lastModified","onerror","readerError","error","others","all","then","fileContent","err","callback","inputElement","document","createElement","type","addEventListener","evt","fromEvent","dispatchEvent","MouseEvent","openFileDialog","Array","join"],"mappings":"2VAIA,oBACEA,OAAAA,aAAS,UACTC,SAAAA,oBACAC,OAAAA,aAAS,SACTC,IAAAA,YACAC,IAAAA,YACAC,IAAAA,mBAE0BC,WAAyB,IAA5CC,OAAOC,SAC0BF,WAAwB,IAAzDG,OAAcC,SACeJ,WAAsB,IAAnDK,OAAYC,SACWN,YAAkB,GAAzCO,OAASC,cAWhBC,aAAU,cACa,IAAjBR,EAAMS,WAINX,EAAkB,IAChBA,EAAiBY,KAAOV,EAAMS,OAASX,EAAiBY,gBAC1DL,GAAc,SAAAM,UAAM,CAAEC,kBAAkB,WAAWD,SAIjDb,EAAiBe,KAAOb,EAAMS,OAASX,EAAiBe,gBAC1DR,GAAc,SAAAM,UAAM,CAAEG,oBAAoB,WAAWH,MAIzDJ,GAAW,OACLQ,EAAef,EAAMgB,KACzB,SAACC,UACC,IAAIC,SAAQ,SAACC,EAA6CC,OAClDC,EAAS,IAAIC,WAGED,WAAgB1B,GACxB4B,KAAKF,EAAQJ,GAE1BI,EAAOG,OAAS,WACV5B,GAEEqB,EAAKQ,KAgEI,IAjEI7B,GAEf8B,EAAS,CAAEC,kBAAkB,IAG7B9B,GAEEoB,EAAKQ,KA0DI,IA3DI5B,GAEf6B,EAAS,CAAEE,kBAAkB,IAIjCT,EAAQ,CACNU,QAASR,EAAOS,OAChBC,KAAMd,EAAKc,KACXC,aAAcf,EAAKe,gBAIvBX,EAAOY,QAAU,WACfP,EAAS,CAAEQ,YAAab,EAAOc,aAG3BT,EAAW,oBAAGK,KAAAA,aAAOd,EAAKc,OAASK,iJACvChB,KAASW,KAAAA,EAAMH,kBAAkB,EAAOD,kBAAkB,GAAUS,WAI5ElB,QAAQmB,IAAItB,GACTuB,MAAK,SAACC,GACLpC,EAAgBoC,GAChBlC,EAAc,cAET,SAAAmC,GACLnC,GAAc,SAAAM,UAAM6B,UAAQ7B,kBAErB,kBAAMJ,GAAW,WA9D1BJ,EAAgB,MAgEjB,CAACH,IAEG,CAACE,EAAcE,EA7EG,YAkF3B,SAAwBX,EAAgBC,EAAmB+C,OAKrDC,EAAeC,SAASC,cAAc,SAE1CF,EAAaG,KAAO,OAGpBH,EAAajD,OAASA,EAEtBiD,EAAahD,SAAWA,EAExBgD,EAAaI,iBAAiB,UA9Fa,SAAAC,GACvCC,YAAUD,GAAKT,MAAK,SAAAtC,GAClBC,EAASD,SA8Ff0C,EAAaO,cAAc,IAAIC,WAAW,UAhGxCC,CADuB1D,aAAkB2D,MAAQ3D,EAAO4D,KAAK,KAAO5D,EACrCC,IA2EmBY"}