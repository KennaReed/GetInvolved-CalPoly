{"version":3,"file":"use-file-picker.esm.js","sources":["../src/useFilePicker.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { fromEvent, FileWithPath } from 'file-selector';\r\nimport { UseFilePickerConfig, FileContent, FilePickerReturnTypes, FileError, ReaderMethod } from './interfaces';\r\n\r\nfunction useFilePicker({ accept = '*', multiple = true, readAs = 'Text', minFileSize, maxFileSize }: UseFilePickerConfig): FilePickerReturnTypes {\r\n  const [files, setFiles] = useState<FileWithPath[]>([]);\r\n  const [filesContent, setFilesContent] = useState<FileContent[]>([]);\r\n  const [fileErrors, setFileErrors] = useState<FileError[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const openFileSelector = () => {\r\n    const fileExtensions = accept instanceof Array ? accept.join(',') : accept;\r\n    openFileDialog(fileExtensions, multiple, evt => {\r\n      fromEvent(evt).then(files => {\r\n        setFiles(files as FileWithPath[]);\r\n      });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (files.length === 0) {\r\n      setFilesContent([]);\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    const filePromises = files.map(\r\n      (file: FileWithPath) =>\r\n        new Promise((resolve: (fileContent: FileContent) => void, reject: (reason: FileError) => void) => {\r\n          const reader = new FileReader();\r\n\r\n          //availible reader methods: readAsText, readAsBinaryString, readAsArrayBuffer, readAsDataURL\r\n          const readStrategy = reader[`readAs${readAs}` as ReaderMethod] as typeof reader.readAsText;\r\n          readStrategy.call(reader, file);\r\n\r\n          reader.onload = () => {\r\n            if (minFileSize) {\r\n              const minBytes = minFileSize * BYTES_PER_MEGABYTE;\r\n              if (file.size < minBytes) {\r\n                addError({ fileSizeTooSmall: true });\r\n              }\r\n            }\r\n            if (maxFileSize) {\r\n              const maxBytes = maxFileSize * BYTES_PER_MEGABYTE;\r\n              if (file.size > maxBytes) {\r\n                addError({ fileSizeToolarge: true });\r\n              }\r\n            }\r\n\r\n            resolve({\r\n              content: reader.result as string,\r\n              name: file.name,\r\n              lastModified: file.lastModified,\r\n            } as FileContent);\r\n          };\r\n\r\n          reader.onerror = () => {\r\n            addError({ readerError: reader.error });\r\n          };\r\n\r\n          const addError = ({ name = file.name, ...others }: FileError) => {\r\n            reject({ name, fileSizeToolarge: false, fileSizeTooSmall: false, ...others });\r\n          };\r\n        })\r\n    );\r\n    Promise.all(filePromises)\r\n      .then((fileContent: FileContent[]) => {\r\n        setFilesContent(fileContent);\r\n        setFileErrors([]);\r\n      })\r\n      .catch(err => {\r\n        setFileErrors(f => [err, ...f]);\r\n      })\r\n      .finally(() => setLoading(false));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [files]);\r\n\r\n  return [filesContent, fileErrors, openFileSelector, loading];\r\n}\r\n\r\nexport default useFilePicker;\r\n\r\nfunction openFileDialog(accept: string, multiple: boolean, callback: (arg: any) => void) {\r\n  // this function must be called from  a user\r\n  // activation event (ie an onclick event)\r\n\r\n  // Create an input element\r\n  var inputElement = document.createElement('input');\r\n  // Set its type to file\r\n  inputElement.type = 'file';\r\n  // Set accept to the file types you want the user to select.\r\n  // Include both the file extension and the mime type\r\n  inputElement.accept = accept;\r\n  // Accept multiple files\r\n  inputElement.multiple = multiple;\r\n  // set onchange event to call callback when user has selected file\r\n  inputElement.addEventListener('change', callback);\r\n  // dispatch a click event to open the file dialog\r\n  inputElement.dispatchEvent(new MouseEvent('click'));\r\n}\r\n\r\n//Const values\r\nconst BYTES_PER_MEGABYTE = 1000000;\r\n"],"names":["useFilePicker","accept","multiple","readAs","minFileSize","maxFileSize","useState","files","setFiles","filesContent","setFilesContent","fileErrors","setFileErrors","loading","setLoading","openFileSelector","fileExtensions","Array","join","openFileDialog","evt","fromEvent","then","useEffect","length","filePromises","map","file","Promise","resolve","reject","reader","FileReader","readStrategy","call","onload","minBytes","BYTES_PER_MEGABYTE","size","addError","fileSizeTooSmall","maxBytes","fileSizeToolarge","content","result","name","lastModified","onerror","readerError","error","others","all","fileContent","err","f","callback","inputElement","document","createElement","type","addEventListener","dispatchEvent","MouseEvent"],"mappings":"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"}