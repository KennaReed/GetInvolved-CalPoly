'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var fileSelector = require('file-selector');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function useFilePicker(_ref) {
  var _ref$accept = _ref.accept,
      accept = _ref$accept === void 0 ? '*' : _ref$accept,
      _ref$multiple = _ref.multiple,
      multiple = _ref$multiple === void 0 ? true : _ref$multiple,
      _ref$readAs = _ref.readAs,
      readAs = _ref$readAs === void 0 ? 'Text' : _ref$readAs,
      minFileSize = _ref.minFileSize,
      maxFileSize = _ref.maxFileSize;

  var _useState = react.useState([]),
      files = _useState[0],
      setFiles = _useState[1];

  var _useState2 = react.useState([]),
      filesContent = _useState2[0],
      setFilesContent = _useState2[1];

  var _useState3 = react.useState([]),
      fileErrors = _useState3[0],
      setFileErrors = _useState3[1];

  var _useState4 = react.useState(false),
      loading = _useState4[0],
      setLoading = _useState4[1];

  var openFileSelector = function openFileSelector() {
    var fileExtensions = accept instanceof Array ? accept.join(',') : accept;
    openFileDialog(fileExtensions, multiple, function (evt) {
      fileSelector.fromEvent(evt).then(function (files) {
        setFiles(files);
      });
    });
  };

  react.useEffect(function () {
    if (files.length === 0) {
      setFilesContent([]);
      return;
    }

    setLoading(true);
    var filePromises = files.map(function (file) {
      return new Promise(function (resolve, reject) {
        var reader = new FileReader(); //availible reader methods: readAsText, readAsBinaryString, readAsArrayBuffer, readAsDataURL

        var readStrategy = reader["readAs" + readAs];
        readStrategy.call(reader, file);

        reader.onload = function () {
          if (minFileSize) {
            var minBytes = minFileSize * BYTES_PER_MEGABYTE;

            if (file.size < minBytes) {
              addError({
                fileSizeTooSmall: true
              });
            }
          }

          if (maxFileSize) {
            var maxBytes = maxFileSize * BYTES_PER_MEGABYTE;

            if (file.size > maxBytes) {
              addError({
                fileSizeToolarge: true
              });
            }
          }

          resolve({
            content: reader.result,
            name: file.name,
            lastModified: file.lastModified
          });
        };

        reader.onerror = function () {
          addError({
            readerError: reader.error
          });
        };

        var addError = function addError(_ref2) {
          var _ref2$name = _ref2.name,
              name = _ref2$name === void 0 ? file.name : _ref2$name,
              others = _objectWithoutPropertiesLoose(_ref2, ["name"]);

          reject(_extends({
            name: name,
            fileSizeToolarge: false,
            fileSizeTooSmall: false
          }, others));
        };
      });
    });
    Promise.all(filePromises).then(function (fileContent) {
      setFilesContent(fileContent);
      setFileErrors([]);
    })["catch"](function (err) {
      setFileErrors(function (f) {
        return [err].concat(f);
      });
    })["finally"](function () {
      return setLoading(false);
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [files]);
  return [filesContent, fileErrors, openFileSelector, loading];
}

function openFileDialog(accept, multiple, callback) {
  // this function must be called from  a user
  // activation event (ie an onclick event)
  // Create an input element
  var inputElement = document.createElement('input'); // Set its type to file

  inputElement.type = 'file'; // Set accept to the file types you want the user to select.
  // Include both the file extension and the mime type

  inputElement.accept = accept; // Accept multiple files

  inputElement.multiple = multiple; // set onchange event to call callback when user has selected file

  inputElement.addEventListener('change', callback); // dispatch a click event to open the file dialog

  inputElement.dispatchEvent(new MouseEvent('click'));
} //Const values


var BYTES_PER_MEGABYTE = 1000000;

exports.useFilePicker = useFilePicker;
//# sourceMappingURL=use-file-picker.cjs.development.js.map
